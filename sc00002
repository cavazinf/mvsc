Rust
use move_lang::{
    account_id::AccountId,
    builtins::{self, event::Event},
    impl_contract,
    lang_items::{Struct, Type},
    value::MoveValue,
};

#[derive(Struct)]
struct Token {
    id: UID,
    name: String,
    description: String,
    owner: AccountId,
}

impl Token {
    pub fn new(name: String, description: String) -> Self {
        Self {
            id: UID::new(),
            name,
            description,
            owner: AccountId::default(),
        }
    }
}

#[derive(Type)]
struct TokenId(UID);

#[derive(Type)]
struct TokenOwner(AccountId);

#[impl_contract]
pub struct TokenContract {
    tokens: object_table::ObjectTable<Token>,
}

impl TokenContract {
    #[entry]
    pub fn init(_ctx: &mut TxContext) -> Self {
        Self {
            tokens: object_table::ObjectTable::new(),
        }
    }

    #[entry]
    pub fn mint(
        &mut self,
        ctx: &mut TxContext,
        name: String,
        description: String,
    ) -> TokenId {
        let token = Token::new(name, description);
        self.tokens.insert(token.id, token);

        Event::emit(
            ctx,
            TokenMinted {
                id: token.id,
                name,
                description,
                owner: ctx.sender(),
            },
        );

        TokenId(token.id)
    }

    #[entry]
    pub fn transfer(
        &mut self,
        ctx: &mut TxContext,
        token_id: TokenId,
        new_owner: AccountId,
    ) {
        let token = self.tokens.get_mut(token_id).unwrap();
        assert!(token.owner == ctx.sender(), NOT_THE_OWNER);
        token.owner = new_owner;

        Event::emit(
            ctx,
            TokenTransferred {
                id: token.id,
                owner: token.owner,
                new_owner,
            },
        );
    }
}

struct TokenMinted {
    id: TokenId,
    name: String,
    description: String,
    owner: AccountId,
}

struct TokenTransferred {
    id: TokenId,
    owner: AccountId,
    new_owner: AccountId,
}
Use o código com cuidado. Saiba mais
Este contrato inteligente define um tipo de objeto chamado Token, que representa um token NFT. Cada token tem um identificador único, um nome, uma descrição e um proprietário.

O contrato oferece duas entradas:

mint(): Cria um novo token e o atribui ao remetente da transação.
transfer(): Transfere a propriedade de um token para um novo proprietário.
A entrada mint() emite um evento TokenMinted que registra a criação do novo token. A entrada transfer() emite um evento TokenTransferred que registra a transferência da propriedade do token.

Aqui está um exemplo de como usar o contrato inteligente:

Rust
fn main() {
    let contract_address =
        "0x0000000000000000000000000000000000000001";

    let sender = AccountId::new();

    let name = "My NFT";
    let description = "A beautiful NFT";

    let token_id = {
        let mut contract = TokenContract::new();
        let token_id = contract.mint(sender.clone(), name.clone(), description.clone());
        contract.destroy();
        token_id
    };

    println!("Token ID: {}", token_id);

    let new_owner = AccountId::new();

    let _ = contract_address.transfer(token_id, new_owner);
}
